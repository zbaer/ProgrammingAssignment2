{
    "contents" : "## The makeCacheMatrix function sets the value\n## of a matrix, gets the value of a matrix,\n## sets the value of the inverse, and gets the\n## value of the matrix.\n\nmakeCacheMatrix <- function(x = matrix()) {\n    i <- NULL\n    set <- function(y) {\n        x <<- y\n        i <- NULL\n    }\n    get <- function() {\n        x\n    }\n    setinverse <- function(inverse) {\n        i <<- inverse\n    }\n    getinverse <- function() {\n        i\n    }\n    list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)\n}\n\n\n## The cacheSolve function checks to see\n## if the inverse of the matrix has already \n## been calculated, if so, it prints\n## \"getting cached inverse,\" and prints the\n## inverse while skipping the calculation. \n## If not, it calculates the inverse of\n## the matrix and sets the cached value.\n\ncacheSolve <- function(x, ...) {\n    i <- x$getinverse()\n    if (!is.null(i)) {\n        message(\"getting cached inverse\")\n        return(i)   \n    }\n    mat <- x$get()\n    i <- solve(mat, ...)\n    x$setinverse(i)\n    i\n}\n",
    "created" : 1400715430296.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1650385648",
    "id" : "2B2D8042",
    "lastKnownWriteTime" : 1400722188,
    "path" : "~/Desktop/Coursera Notes/02 R Programming/Week 3/cachematrix.R",
    "project_path" : "cachematrix.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}